package main

import (
	"flag"
	"os"
	"fmt"
	"time"
	"github.com/jcloudpub/speedy/imageserver/util"
	"sync"
	"bytes"
	"strconv"
	"github.com/jcloudpub/speedy/imageserver/util/log"
)

const (
	IMAGE_SERVER	= "http://127.0.0.1:6788"
	PATH_PREX_DIR	= "loadtest/abc/tag_"
	PATH_PREX		= "loadtest/abc/key_"
)

func PostFileLoad(serverAddr, fileName string, routineCount, perRoutine int) {

	fmt.Println("routineCount:", routineCount, ", perRoutine:", perRoutine)

	f, err := os.Open(fileName)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer f.Close()

	info, err := f.Stat()
	if err != nil {
		fmt.Println(err)
		return
	}

	fsize := info.Size()
	fbody := make([]byte, fsize)
	nread, err := f.Read(fbody)
	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println("file size:", fsize, ", nread:", nread)
	var wg sync.WaitGroup
	wg.Add(int(routineCount))

	fmt.Println("begin upload")

	var i int

	start := time.Now()
	for i = 0; i < routineCount; i++ {

		go func(idx int) {
			defer wg.Done()

			fmt.Println("begin routine:", idx)

			var j int
			for j = 0; j < perRoutine; j++ {
				path := PATH_PREX + "_" + strconv.Itoa(idx) + "_" + strconv.Itoa(j)

				fSizeStr := strconv.FormatUint(uint64(fsize), 10)
				bytesRange := "0-" + fSizeStr

				header := make(map[string][]string)
				header["Path"] = []string{path}
				header["Fragment-Index"] = []string{"0"}
				header["Bytes-Range"] = []string{bytesRange}
				header["Is-Last"] = []string{"true"}

				_, statusCode, err := util.Call("POST", serverAddr, "/v1/file", bytes.NewBuffer(fbody), header)
				if err != nil {
					fmt.Println("routine:", idx, "error:", err)
					return
				}

				fmt.Println("routine:", idx, "statuscode:", statusCode)
			}
		}(i)
	}

	wg.Wait()

	end := time.Now()
	duration := end.Sub(start)

	fmt.Println("finish upload")

	fmt.Println("duration:", duration)
}

func GetFileLoad(serverAddr string, routineCount, perRoutine int) {

	fmt.Println("routineCount:", routineCount, ", perRoutine:", perRoutine)

	var wg sync.WaitGroup

	wg.Add(int(routineCount))

	start := time.Now()

	var i int

	for i = 0; i < routineCount; i++ {

		go func(idx int) {
			defer wg.Done()

			var j int
			for j = 0; j < perRoutine; j++ {
				path := PATH_PREX + "_" + strconv.Itoa(idx) + "_" + strconv.Itoa(j)
				header := make(map[string][]string)
				header["Path"] = []string{path}

				result, statusCode, err := util.Call("GET", serverAddr, "/v1/file", nil, header)
				if err != nil {
					fmt.Println("routine:", idx, "error:", err)
					return
				}

				fmt.Println("routine:", idx, "statuscode:", statusCode)
				fmt.Println("databody len:", len(result))
			}
		}(i)
	}

	wg.Wait()

	end := time.Now()
	duration := end.Sub(start)

	fmt.Println("duration:", duration)
}

func main() {
	var cmd = flag.String("c", "nocommand", "command")
	var hostAddr = flag.String("h", "imageserver", "127.0.0.1")
	var FileName = flag.String("f", "filename", "/tmp/testfile")
	var routineCount = flag.Int("r", 0, "routine count")
	var perRountine = flag.Int("w", 0, "per routine works")

	flag.Parse()

	fmt.Printf("begin\n")
	fmt.Println("cmd:", *cmd)

	if *cmd == "upload" {
		fmt.Printf("upload file load test\n")
		PostFileLoad(*hostAddr, *FileName, *routineCount, *perRountine)
	} else if *cmd == "download" {
		fmt.Println("download file load test")
		GetFileLoad(*hostAddr, *routineCount, *perRountine)
	} else {
		fmt.Printf("do nothing\n")
	}
}
